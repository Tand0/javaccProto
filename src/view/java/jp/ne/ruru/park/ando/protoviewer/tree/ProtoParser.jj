package jp.ne.ruru.park.ando.protoviewer.tree;


/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ProtoParser.jj */
/*@egen*//**
 *
 *  Protocol Buffers grammar  for JavaCC
 *
 *  Contributed by Toshikazu Ando (foobar@em.boo.jp)
 *
 * @see "https://developers.google.com/protocol-buffers/docs/proto3"
 *
 */

options {
    STATIC=false;
               
                 
    SANITY_CHECK=true;
    DEBUG_PARSER=false;
    DEBUG_TOKEN_MANAGER=false;
}

PARSER_BEGIN(ProtoParser)

/**
 *
 *  Protocol Buffers grammar  for JavaCC
 *
 *  Contributed by Toshikazu Ando (foobar@em.boo.jp)
 *
 *  * @see "https://developers.google.com/protocol-buffers/docs/proto3"
 */
public class ProtoParser/*@bgen(jjtree)*/implements ProtoParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTProtoParserState jjtree = new JJTProtoParserState();

/*@egen*/
}

PARSER_END(ProtoParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}


TOKEN :
{
  <CSTRING_TKN: "\"" ( ~["\""] )* "\"" >
| <EQUL_TKN: "=">
| <SEMI_COLON_TKN: ";">
| <COLON_TKN: ":">
| <CONNMA_TKN: ",">
| <DOT_TKN: ".">
| <TO_TKN: "to">
| <LEFTBRACE_TKN: "{">
| <RIGHTBRACE_TKN: "}">
| <LEFTPAREN_TKN: "(">
| <RIGHTPAREN_TKN: ")">
| <LEFTBRACKET_TKN: "[">
| <RIGHTBRACKET_TKN: "]">
| <LESSTHAN_TKN: "<">
| <GRATETHAN_TKN: ">">
| <SYNTAX_TKN: "syntax">
| <BOOLEAN_TKN: "true" | "false">
| <ATTRIBUTE_TKN: "required"
                | "optional">
| <OPTION_TKN: "option">
| <IMPORT_TKN: "import">
| <PUBLIC_TKN: "public">
| <PACKAGE_TKN: "package">
| <SERVICE_TKN: "service">
| <MESSAGE_TKN: "message">
| <ENUM_TKN: "enum">
| <ONEOF_TKN: "oneof">
| <GROUP_TKN: "group">
| <EXTENTIONS_TKN: "extensions">
| <EXTEND_TKN: "extend">
| <MAP_TKN: "map">
| <RESERVED_TKN: "reserved">
| <REPEATED_TKN: "repeated">
| <RETURNS_TKN: "returns">
| <STREAM_TKN: "stream">
| <TYPE_TKN: "double"
           | "float"
           | "int32"
           | "int64"
           | "uint32"
           | "uint64"
           | "sint32"
           | "sint64"
           | "fixed32"
           | "fixed64"
           | "sfixed32"
           | "sfixed64"
           | "bool"
           | "string"
           | "bytes"
           | "Any">
| <RPC_TKN: "rpc">
| <NUMBER_TKN: "0" | (["-"])?["1"-"9"](["0"-"9"])* | "max">
| <DOUBLE_TKN: ("0" | (["-"])?["1"-"9"](["0"-"9"])*) "." (["0"-"9"])*>
| <IDENT_TKN: ["_","a"-"z","A"-"Z"] (["_","a"-"z","A"-"Z","0"-"9"])*>
}

ASTInput Input() : {/*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) Input */
  try {
/*@egen*/ 
  (ImportPart()
   | SyntaxPart()
   | OptionPart()
   | PackagePart()
   | ServicePart()
   | MessagePart()
   | EnumPart()
   | ExtendPart())*/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImportPart() : {/*@bgen(jjtree) ImportPart */
  ASTImportPart jjtn000 = new ASTImportPart(JJTIMPORTPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) ImportPart */
  try {
/*@egen*/ 
  <IMPORT_TKN> [PublicPart()] CStringPart() <SEMI_COLON_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PublicPart() : {/*@bgen(jjtree) PublicPart */
  ASTPublicPart jjtn000 = new ASTPublicPart(JJTPUBLICPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) PublicPart */
    try {
/*@egen*/
    <PUBLIC_TKN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ValuePart() : {/*@bgen(jjtree) ValuePart */
    ASTValuePart jjtn000 = new ASTValuePart(JJTVALUEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) ValuePart */
  try {
/*@egen*/     
  BooleanPart()
   | CStringPart()
   | NumberPart()
   | DoublePart()
   | IndentPart()
   | BraceValuePart()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void BooleanPart() : {/*@bgen(jjtree) BooleanPart */
    ASTBooleanPart jjtn000 = new ASTBooleanPart(JJTBOOLEANPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) BooleanPart */
    try {
/*@egen*/
    t = <BOOLEAN_TKN>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void CStringPart() : {/*@bgen(jjtree) CStringPart */
    ASTCStringPart jjtn000 = new ASTCStringPart(JJTCSTRINGPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/ 
    Token t;
} {/*@bgen(jjtree) CStringPart */
    try {
/*@egen*/
    t = <CSTRING_TKN>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void NumberPart() : {/*@bgen(jjtree) NumberPart */
    ASTNumberPart jjtn000 = new ASTNumberPart(JJTNUMBERPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/ 
    Token t;
} {/*@bgen(jjtree) NumberPart */
    try {
/*@egen*/
    t = <NUMBER_TKN>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void DoublePart() : {/*@bgen(jjtree) DoublePart */
    ASTDoublePart jjtn000 = new ASTDoublePart(JJTDOUBLEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/ 
    Token t;
} {/*@bgen(jjtree) DoublePart */
    try {
/*@egen*/
    t = <DOUBLE_TKN>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void IndentPart() : {/*@bgen(jjtree) IndentPart */
    ASTIndentPart jjtn000 = new ASTIndentPart(JJTINDENTPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) IndentPart */
    try {
/*@egen*/
    t = <IDENT_TKN>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void BraceValuePart() : {/*@bgen(jjtree) BraceValuePart */
  ASTBraceValuePart jjtn000 = new ASTBraceValuePart(JJTBRACEVALUEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) BraceValuePart */
   try {
/*@egen*/
   <LEFTBRACE_TKN>
   (BraceValueOnePart())*
   <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void BraceValueOnePart() : {/*@bgen(jjtree) BraceValueOnePart */
  ASTBraceValueOnePart jjtn000 = new ASTBraceValueOnePart(JJTBRACEVALUEONEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) BraceValueOnePart */
   try {
/*@egen*/
   IndentPart() <COLON_TKN> (BraceValueOneBracketPart() | ValuePart())/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void BraceValueOneBracketPart() : {/*@bgen(jjtree) BraceValueOneBracketPart */
  ASTBraceValueOneBracketPart jjtn000 = new ASTBraceValueOneBracketPart(JJTBRACEVALUEONEBRACKETPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) BraceValueOneBracketPart */
   try {
/*@egen*/
   <LEFTBRACKET_TKN>
   ValuePart() (<CONNMA_TKN> ValuePart())*
   <RIGHTBRACKET_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SyntaxPart() : {/*@bgen(jjtree) SyntaxPart */
  ASTSyntaxPart jjtn000 = new ASTSyntaxPart(JJTSYNTAXPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) SyntaxPart */
   try {
/*@egen*/ 
   <SYNTAX_TKN> <EQUL_TKN> CStringPart() <SEMI_COLON_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void OptionPart() : {/*@bgen(jjtree) OptionPart */
  ASTOptionPart jjtn000 = new ASTOptionPart(JJTOPTIONPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) OptionPart */
    try {
/*@egen*/     
    <OPTION_TKN> ClassPart() <EQUL_TKN> ValuePart() <SEMI_COLON_TKN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ClassPart() : {/*@bgen(jjtree) ClassPart */
  ASTClassPart jjtn000 = new ASTClassPart(JJTCLASSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) ClassPart */
  try {
/*@egen*/
  (IndentPart()|CustomOptionsPart()) (<DOT_TKN> (IndentPart()|CustomOptionsPart()))*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void CustomOptionsPart() : {/*@bgen(jjtree) CustomOptionsPart */
  ASTCustomOptionsPart jjtn000 = new ASTCustomOptionsPart(JJTCUSTOMOPTIONSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) CustomOptionsPart */
   try {
/*@egen*/
   <LEFTPAREN_TKN> ClassPart() <RIGHTPAREN_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void KeyPart() : {/*@bgen(jjtree) KeyPart */
    ASTKeyPart jjtn000 = new ASTKeyPart(JJTKEYPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) KeyPart */
   try {
/*@egen*/
   t = <IDENT_TKN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.value = t;}
    | t = <MESSAGE_TKN>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.value = t;}
    | t = <PACKAGE_TKN>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.value = t;}
    | t = <SERVICE_TKN>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void PackagePart() : {/*@bgen(jjtree) PackagePart */
  ASTPackagePart jjtn000 = new ASTPackagePart(JJTPACKAGEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) PackagePart */
  try {
/*@egen*/ 
  <PACKAGE_TKN> ClassPart() <SEMI_COLON_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ServicePart() : {/*@bgen(jjtree) ServicePart */
  ASTServicePart jjtn000 = new ASTServicePart(JJTSERVICEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) ServicePart */
  try {
/*@egen*/ 
  <SERVICE_TKN> <IDENT_TKN>
   <LEFTBRACE_TKN>
   (OptionPart()
    |RpcPart())*
   <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void RpcPart() : {/*@bgen(jjtree) RpcPart */
  ASTRpcPart jjtn000 = new ASTRpcPart(JJTRPCPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) RpcPart */
  try {
/*@egen*/ 
  <RPC_TKN> ClassPart()
   <LEFTPAREN_TKN>
   [(StreamPart())? ClassPart()]
   <RIGHTPAREN_TKN>
   <RETURNS_TKN>
   
   <LEFTPAREN_TKN>
   [(StreamPart())? ClassPart()]
   <RIGHTPAREN_TKN>
   
   (RpcBracePart()|<SEMI_COLON_TKN>)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void StreamPart() : {/*@bgen(jjtree) StreamPart */
  ASTStreamPart jjtn000 = new ASTStreamPart(JJTSTREAMPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) StreamPart */
    try {
/*@egen*/     
    <STREAM_TKN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void RpcBracePart() : {/*@bgen(jjtree) RpcBracePart */
  ASTRpcBracePart jjtn000 = new ASTRpcBracePart(JJTRPCBRACEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) RpcBracePart */
    try {
/*@egen*/     
    <LEFTBRACE_TKN>
    (OptionPart())*
    <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MessagePart() : {/*@bgen(jjtree) MessagePart */
  ASTMessagePart jjtn000 = new ASTMessagePart(JJTMESSAGEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) MessagePart */
  try {
/*@egen*/ 
  <MESSAGE_TKN> ClassPart() MessageBranchePart()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void MessageBranchePart() : {/*@bgen(jjtree) MessageBranchePart */
  ASTMessageBranchePart jjtn000 = new ASTMessageBranchePart(JJTMESSAGEBRANCHEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) MessageBranchePart */
   try {
/*@egen*/
   <LEFTBRACE_TKN>
   (AttributeMemberPart()
    |EnumPart()
    |ReservedPart()
    |OneOfPart()
    |MapPart()
    |MessagePart()
    |ExtentionsPart()
    |ExtendPart()
    |OptionPart()
    |<SEMI_COLON_TKN>)*
   <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void AttributeMemberPart() : {/*@bgen(jjtree) AttributeMemberPart */
  ASTAttributeMemberPart jjtn000 = new ASTAttributeMemberPart(JJTATTRIBUTEMEMBERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) AttributeMemberPart */
  try {
/*@egen*/ 
  [AttributePart()][RepeatedPart()]
  (MemberPart()|GroupPart())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void MemberPart() : {/*@bgen(jjtree) MemberPart */
  ASTMemberPart jjtn000 = new ASTMemberPart(JJTMEMBERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) MemberPart */
  try {
/*@egen*/ 
  ClassOrTypePart() KeyPart() <EQUL_TKN> NumberPart() [BracketPart()] <SEMI_COLON_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void AttributePart() : {/*@bgen(jjtree) AttributePart */
    ASTAttributePart jjtn000 = new ASTAttributePart(JJTATTRIBUTEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) AttributePart */
    try {
/*@egen*/ 
    t = <ATTRIBUTE_TKN>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void RepeatedPart() : {/*@bgen(jjtree) RepeatedPart */
  ASTRepeatedPart jjtn000 = new ASTRepeatedPart(JJTREPEATEDPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) RepeatedPart */
    try {
/*@egen*/ 
    <REPEATED_TKN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void GroupPart() : {/*@bgen(jjtree) GroupPart */
  ASTGroupPart jjtn000 = new ASTGroupPart(JJTGROUPPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) GroupPart */
  try {
/*@egen*/
  <GROUP_TKN> ClassPart() <EQUL_TKN> NumberPart()
  MessageBranchePart()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void ClassOrTypePart() : {/*@bgen(jjtree) ClassOrTypePart */
  ASTClassOrTypePart jjtn000 = new ASTClassOrTypePart(JJTCLASSORTYPEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) ClassOrTypePart */
  try {
/*@egen*/     
  TypePart()
  | ClassPart()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void TypePart() : {/*@bgen(jjtree) TypePart */
    ASTTypePart jjtn000 = new ASTTypePart(JJTTYPEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) TypePart */
  try {
/*@egen*/     
  t = <TYPE_TKN>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void BracketPart() : {/*@bgen(jjtree) BracketPart */
  ASTBracketPart jjtn000 = new ASTBracketPart(JJTBRACKETPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) BracketPart */
  try {
/*@egen*/ 
  <LEFTBRACKET_TKN>
  (BracketMemberPart() (<CONNMA_TKN> BracketMemberPart())*)?
  <RIGHTBRACKET_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void BracketMemberPart() : {/*@bgen(jjtree) BracketMemberPart */
  ASTBracketMemberPart jjtn000 = new ASTBracketMemberPart(JJTBRACKETMEMBERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) BracketMemberPart */
  try {
/*@egen*/ 
  ClassPart() <EQUL_TKN> ValuePart()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EnumPart() : {/*@bgen(jjtree) EnumPart */
  ASTEnumPart jjtn000 = new ASTEnumPart(JJTENUMPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) EnumPart */
  try {
/*@egen*/ 
  <ENUM_TKN>
   ClassPart()
   <LEFTBRACE_TKN>
   (EnumMemberPart())*
   <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void EnumMemberPart() : {/*@bgen(jjtree) EnumMemberPart */
  ASTEnumMemberPart jjtn000 = new ASTEnumMemberPart(JJTENUMMEMBERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) EnumMemberPart */
  try {
/*@egen*/ 
  [EnumOptionMemberPart()]
  ClassPart() <EQUL_TKN> ValuePart() [BracketPart()] <SEMI_COLON_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void EnumOptionMemberPart() : {/*@bgen(jjtree) EnumOptionMemberPart */
  ASTEnumOptionMemberPart jjtn000 = new ASTEnumOptionMemberPart(JJTENUMOPTIONMEMBERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) EnumOptionMemberPart */
  try {
/*@egen*/ 
  <OPTION_TKN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ReservedPart() : {/*@bgen(jjtree) ReservedPart */
  ASTReservedPart jjtn000 = new ASTReservedPart(JJTRESERVEDPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) ReservedPart */
  try {
/*@egen*/ 
  <RESERVED_TKN> ValuePart() (DeviderPart() ValuePart())* <SEMI_COLON_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void DeviderPart() : {/*@bgen(jjtree) DeviderPart */
    ASTDeviderPart jjtn000 = new ASTDeviderPart(JJTDEVIDERPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) DeviderPart */
    try {
/*@egen*/
    t = <CONNMA_TKN>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.value = t;}
    | t = <TO_TKN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OneOfPart() : {/*@bgen(jjtree) OneOfPart */
  ASTOneOfPart jjtn000 = new ASTOneOfPart(JJTONEOFPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) OneOfPart */
  try {
/*@egen*/ 
  <ONEOF_TKN>
   ClassPart()
   <LEFTBRACE_TKN>
   (MemberPart())*
   <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MapPart() : {/*@bgen(jjtree) MapPart */
  ASTMapPart jjtn000 = new ASTMapPart(JJTMAPPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) MapPart */
  try {
/*@egen*/ 

  <MAP_TKN>
  <LESSTHAN_TKN>
   ClassOrTypePart()
   <CONNMA_TKN>
   ClassOrTypePart()
  <GRATETHAN_TKN>
  KeyPart() <EQUL_TKN> NumberPart() <SEMI_COLON_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExtentionsPart() : {/*@bgen(jjtree) ExtentionsPart */
  ASTExtentionsPart jjtn000 = new ASTExtentionsPart(JJTEXTENTIONSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) ExtentionsPart */
  try {
/*@egen*/ 

  <EXTENTIONS_TKN> NumberPart() <TO_TKN> NumberPart() <SEMI_COLON_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void ExtendPart() : {/*@bgen(jjtree) ExtendPart */
  ASTExtendPart jjtn000 = new ASTExtendPart(JJTEXTENDPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) ExtendPart */
  try {
/*@egen*/ 
  <EXTEND_TKN> ClassPart() MessageBranchePart()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
