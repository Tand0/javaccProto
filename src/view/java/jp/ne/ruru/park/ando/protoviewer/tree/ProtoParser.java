package jp.ne.ruru.park.ando.protoviewer.tree;


/* ProtoParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ProtoParser.java */
/**
 *
 *  Protocol Buffers grammar  for JavaCC
 *
 *  Contributed by Toshikazu Ando (foobar@em.boo.jp)
 *
 *  * @see "https://developers.google.com/protocol-buffers/docs/proto3"
 */
public class ProtoParser/*@bgen(jjtree)*/implements ProtoParserTreeConstants, ProtoParserConstants {/*@bgen(jjtree)*/
  protected JJTProtoParserState jjtree = new JJTProtoParserState();

  final public ASTInput Input() throws ParseException {/*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYNTAX_TKN:
        case OPTION_TKN:
        case IMPORT_TKN:
        case PACKAGE_TKN:
        case SERVICE_TKN:
        case MESSAGE_TKN:
        case ENUM_TKN:
        case EXTEND_TKN:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT_TKN:{
          ImportPart();
          break;
          }
        case SYNTAX_TKN:{
          SyntaxPart();
          break;
          }
        case OPTION_TKN:{
          OptionPart();
          break;
          }
        case PACKAGE_TKN:{
          PackagePart();
          break;
          }
        case SERVICE_TKN:{
          ServicePart();
          break;
          }
        case MESSAGE_TKN:{
          MessagePart();
          break;
          }
        case ENUM_TKN:{
          EnumPart();
          break;
          }
        case EXTEND_TKN:{
          ExtendPart();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ImportPart() throws ParseException {/*@bgen(jjtree) ImportPart */
  ASTImportPart jjtn000 = new ASTImportPart(JJTIMPORTPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC_TKN:{
        PublicPart();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      CStringPart();
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PublicPart() throws ParseException {/*@bgen(jjtree) PublicPart */
  ASTPublicPart jjtn000 = new ASTPublicPart(JJTPUBLICPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC_TKN);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ValuePart() throws ParseException {/*@bgen(jjtree) ValuePart */
    ASTValuePart jjtn000 = new ASTValuePart(JJTVALUEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN_TKN:{
        BooleanPart();
        break;
        }
      case CSTRING_TKN:{
        CStringPart();
        break;
        }
      case NUMBER_TKN:{
        NumberPart();
        break;
        }
      case DOUBLE_TKN:{
        DoublePart();
        break;
        }
      case IDENT_TKN:{
        IndentPart();
        break;
        }
      case LEFTBRACE_TKN:{
        BraceValuePart();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BooleanPart() throws ParseException {/*@bgen(jjtree) BooleanPart */
    ASTBooleanPart jjtn000 = new ASTBooleanPart(JJTBOOLEANPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BOOLEAN_TKN);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CStringPart() throws ParseException {/*@bgen(jjtree) CStringPart */
    ASTCStringPart jjtn000 = new ASTCStringPart(JJTCSTRINGPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NumberPart() throws ParseException {/*@bgen(jjtree) NumberPart */
    ASTNumberPart jjtn000 = new ASTNumberPart(JJTNUMBERPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER_TKN);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DoublePart() throws ParseException {/*@bgen(jjtree) DoublePart */
    ASTDoublePart jjtn000 = new ASTDoublePart(JJTDOUBLEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DOUBLE_TKN);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IndentPart() throws ParseException {/*@bgen(jjtree) IndentPart */
    ASTIndentPart jjtn000 = new ASTIndentPart(JJTINDENTPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENT_TKN);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BraceValuePart() throws ParseException {/*@bgen(jjtree) BraceValuePart */
  ASTBraceValuePart jjtn000 = new ASTBraceValuePart(JJTBRACEVALUEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACE_TKN);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENT_TKN:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        BraceValueOnePart();
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void BraceValueOnePart() throws ParseException {/*@bgen(jjtree) BraceValueOnePart */
  ASTBraceValueOnePart jjtn000 = new ASTBraceValueOnePart(JJTBRACEVALUEONEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IndentPart();
      jj_consume_token(COLON_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACKET_TKN:{
        BraceValueOneBracketPart();
        break;
        }
      case CSTRING_TKN:
      case LEFTBRACE_TKN:
      case BOOLEAN_TKN:
      case NUMBER_TKN:
      case DOUBLE_TKN:
      case IDENT_TKN:{
        ValuePart();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void BraceValueOneBracketPart() throws ParseException {/*@bgen(jjtree) BraceValueOneBracketPart */
  ASTBraceValueOneBracketPart jjtn000 = new ASTBraceValueOneBracketPart(JJTBRACEVALUEONEBRACKETPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACKET_TKN);
      ValuePart();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONNMA_TKN:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(CONNMA_TKN);
        ValuePart();
      }
      jj_consume_token(RIGHTBRACKET_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SyntaxPart() throws ParseException {/*@bgen(jjtree) SyntaxPart */
  ASTSyntaxPart jjtn000 = new ASTSyntaxPart(JJTSYNTAXPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SYNTAX_TKN);
      jj_consume_token(EQUL_TKN);
      CStringPart();
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void OptionPart() throws ParseException {/*@bgen(jjtree) OptionPart */
  ASTOptionPart jjtn000 = new ASTOptionPart(JJTOPTIONPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPTION_TKN);
      ClassPart();
      jj_consume_token(EQUL_TKN);
      ValuePart();
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ClassPart() throws ParseException {/*@bgen(jjtree) ClassPart */
  ASTClassPart jjtn000 = new ASTClassPart(JJTCLASSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENT_TKN:{
        IndentPart();
        break;
        }
      case LEFTPAREN_TKN:{
        CustomOptionsPart();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT_TKN:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        jj_consume_token(DOT_TKN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENT_TKN:{
          IndentPart();
          break;
          }
        case LEFTPAREN_TKN:{
          CustomOptionsPart();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CustomOptionsPart() throws ParseException {/*@bgen(jjtree) CustomOptionsPart */
  ASTCustomOptionsPart jjtn000 = new ASTCustomOptionsPart(JJTCUSTOMOPTIONSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTPAREN_TKN);
      ClassPart();
      jj_consume_token(RIGHTPAREN_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void KeyPart() throws ParseException {/*@bgen(jjtree) KeyPart */
    ASTKeyPart jjtn000 = new ASTKeyPart(JJTKEYPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENT_TKN:{
        t = jj_consume_token(IDENT_TKN);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.value = t;
        break;
        }
      case MESSAGE_TKN:{
        t = jj_consume_token(MESSAGE_TKN);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.value = t;
        break;
        }
      case PACKAGE_TKN:{
        t = jj_consume_token(PACKAGE_TKN);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.value = t;
        break;
        }
      case SERVICE_TKN:{
        t = jj_consume_token(SERVICE_TKN);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.value = t;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PackagePart() throws ParseException {/*@bgen(jjtree) PackagePart */
  ASTPackagePart jjtn000 = new ASTPackagePart(JJTPACKAGEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PACKAGE_TKN);
      ClassPart();
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ServicePart() throws ParseException {/*@bgen(jjtree) ServicePart */
  ASTServicePart jjtn000 = new ASTServicePart(JJTSERVICEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SERVICE_TKN);
      jj_consume_token(IDENT_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPTION_TKN:
        case RPC_TKN:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPTION_TKN:{
          OptionPart();
          break;
          }
        case RPC_TKN:{
          RpcPart();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RpcPart() throws ParseException {/*@bgen(jjtree) RpcPart */
  ASTRpcPart jjtn000 = new ASTRpcPart(JJTRPCPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RPC_TKN);
      ClassPart();
      jj_consume_token(LEFTPAREN_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTPAREN_TKN:
      case STREAM_TKN:
      case IDENT_TKN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STREAM_TKN:{
          StreamPart();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        ClassPart();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTPAREN_TKN);
      jj_consume_token(RETURNS_TKN);
      jj_consume_token(LEFTPAREN_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTPAREN_TKN:
      case STREAM_TKN:
      case IDENT_TKN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STREAM_TKN:{
          StreamPart();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        ClassPart();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTPAREN_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACE_TKN:{
        RpcBracePart();
        break;
        }
      case SEMI_COLON_TKN:{
        jj_consume_token(SEMI_COLON_TKN);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StreamPart() throws ParseException {/*@bgen(jjtree) StreamPart */
  ASTStreamPart jjtn000 = new ASTStreamPart(JJTSTREAMPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STREAM_TKN);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RpcBracePart() throws ParseException {/*@bgen(jjtree) RpcBracePart */
  ASTRpcBracePart jjtn000 = new ASTRpcBracePart(JJTRPCBRACEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACE_TKN);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPTION_TKN:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_6;
        }
        OptionPart();
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MessagePart() throws ParseException {/*@bgen(jjtree) MessagePart */
  ASTMessagePart jjtn000 = new ASTMessagePart(JJTMESSAGEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MESSAGE_TKN);
      ClassPart();
      MessageBranchePart();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MessageBranchePart() throws ParseException {/*@bgen(jjtree) MessageBranchePart */
  ASTMessageBranchePart jjtn000 = new ASTMessageBranchePart(JJTMESSAGEBRANCHEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACE_TKN);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMI_COLON_TKN:
        case LEFTPAREN_TKN:
        case ATTRIBUTE_TKN:
        case OPTION_TKN:
        case MESSAGE_TKN:
        case ENUM_TKN:
        case ONEOF_TKN:
        case GROUP_TKN:
        case EXTENTIONS_TKN:
        case EXTEND_TKN:
        case MAP_TKN:
        case RESERVED_TKN:
        case REPEATED_TKN:
        case TYPE_TKN:
        case IDENT_TKN:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFTPAREN_TKN:
        case ATTRIBUTE_TKN:
        case GROUP_TKN:
        case REPEATED_TKN:
        case TYPE_TKN:
        case IDENT_TKN:{
          AttributeMemberPart();
          break;
          }
        case ENUM_TKN:{
          EnumPart();
          break;
          }
        case RESERVED_TKN:{
          ReservedPart();
          break;
          }
        case ONEOF_TKN:{
          OneOfPart();
          break;
          }
        case MAP_TKN:{
          MapPart();
          break;
          }
        case MESSAGE_TKN:{
          MessagePart();
          break;
          }
        case EXTENTIONS_TKN:{
          ExtentionsPart();
          break;
          }
        case EXTEND_TKN:{
          ExtendPart();
          break;
          }
        case OPTION_TKN:{
          OptionPart();
          break;
          }
        case SEMI_COLON_TKN:{
          jj_consume_token(SEMI_COLON_TKN);
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AttributeMemberPart() throws ParseException {/*@bgen(jjtree) AttributeMemberPart */
  ASTAttributeMemberPart jjtn000 = new ASTAttributeMemberPart(JJTATTRIBUTEMEMBERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATTRIBUTE_TKN:{
        AttributePart();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REPEATED_TKN:{
        RepeatedPart();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTPAREN_TKN:
      case TYPE_TKN:
      case IDENT_TKN:{
        MemberPart();
        break;
        }
      case GROUP_TKN:{
        GroupPart();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MemberPart() throws ParseException {/*@bgen(jjtree) MemberPart */
  ASTMemberPart jjtn000 = new ASTMemberPart(JJTMEMBERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassOrTypePart();
      KeyPart();
      jj_consume_token(EQUL_TKN);
      NumberPart();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACKET_TKN:{
        BracketPart();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AttributePart() throws ParseException {/*@bgen(jjtree) AttributePart */
    ASTAttributePart jjtn000 = new ASTAttributePart(JJTATTRIBUTEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ATTRIBUTE_TKN);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RepeatedPart() throws ParseException {/*@bgen(jjtree) RepeatedPart */
  ASTRepeatedPart jjtn000 = new ASTRepeatedPart(JJTREPEATEDPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REPEATED_TKN);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GroupPart() throws ParseException {/*@bgen(jjtree) GroupPart */
  ASTGroupPart jjtn000 = new ASTGroupPart(JJTGROUPPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GROUP_TKN);
      ClassPart();
      jj_consume_token(EQUL_TKN);
      NumberPart();
      MessageBranchePart();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOrTypePart() throws ParseException {/*@bgen(jjtree) ClassOrTypePart */
  ASTClassOrTypePart jjtn000 = new ASTClassOrTypePart(JJTCLASSORTYPEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TYPE_TKN:{
        TypePart();
        break;
        }
      case LEFTPAREN_TKN:
      case IDENT_TKN:{
        ClassPart();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypePart() throws ParseException {/*@bgen(jjtree) TypePart */
    ASTTypePart jjtn000 = new ASTTypePart(JJTTYPEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TYPE_TKN);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BracketPart() throws ParseException {/*@bgen(jjtree) BracketPart */
  ASTBracketPart jjtn000 = new ASTBracketPart(JJTBRACKETPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACKET_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTPAREN_TKN:
      case IDENT_TKN:{
        BracketMemberPart();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CONNMA_TKN:{
            ;
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            break label_8;
          }
          jj_consume_token(CONNMA_TKN);
          BracketMemberPart();
        }
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTBRACKET_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BracketMemberPart() throws ParseException {/*@bgen(jjtree) BracketMemberPart */
  ASTBracketMemberPart jjtn000 = new ASTBracketMemberPart(JJTBRACKETMEMBERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassPart();
      jj_consume_token(EQUL_TKN);
      ValuePart();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EnumPart() throws ParseException {/*@bgen(jjtree) EnumPart */
  ASTEnumPart jjtn000 = new ASTEnumPart(JJTENUMPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENUM_TKN);
      ClassPart();
      jj_consume_token(LEFTBRACE_TKN);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFTPAREN_TKN:
        case OPTION_TKN:
        case IDENT_TKN:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_9;
        }
        EnumMemberPart();
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EnumMemberPart() throws ParseException {/*@bgen(jjtree) EnumMemberPart */
  ASTEnumMemberPart jjtn000 = new ASTEnumMemberPart(JJTENUMMEMBERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPTION_TKN:{
        EnumOptionMemberPart();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      ClassPart();
      jj_consume_token(EQUL_TKN);
      ValuePart();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACKET_TKN:{
        BracketPart();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EnumOptionMemberPart() throws ParseException {/*@bgen(jjtree) EnumOptionMemberPart */
  ASTEnumOptionMemberPart jjtn000 = new ASTEnumOptionMemberPart(JJTENUMOPTIONMEMBERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPTION_TKN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ReservedPart() throws ParseException {/*@bgen(jjtree) ReservedPart */
  ASTReservedPart jjtn000 = new ASTReservedPart(JJTRESERVEDPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVED_TKN);
      ValuePart();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONNMA_TKN:
        case TO_TKN:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_10;
        }
        DeviderPart();
        ValuePart();
      }
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DeviderPart() throws ParseException {/*@bgen(jjtree) DeviderPart */
    ASTDeviderPart jjtn000 = new ASTDeviderPart(JJTDEVIDERPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONNMA_TKN:{
        t = jj_consume_token(CONNMA_TKN);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.value = t;
        break;
        }
      case TO_TKN:{
        t = jj_consume_token(TO_TKN);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.value = t;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OneOfPart() throws ParseException {/*@bgen(jjtree) OneOfPart */
  ASTOneOfPart jjtn000 = new ASTOneOfPart(JJTONEOFPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ONEOF_TKN);
      ClassPart();
      jj_consume_token(LEFTBRACE_TKN);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFTPAREN_TKN:
        case TYPE_TKN:
        case IDENT_TKN:{
          ;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          break label_11;
        }
        MemberPart();
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MapPart() throws ParseException {/*@bgen(jjtree) MapPart */
  ASTMapPart jjtn000 = new ASTMapPart(JJTMAPPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAP_TKN);
      jj_consume_token(LESSTHAN_TKN);
      ClassOrTypePart();
      jj_consume_token(CONNMA_TKN);
      ClassOrTypePart();
      jj_consume_token(GRATETHAN_TKN);
      KeyPart();
      jj_consume_token(EQUL_TKN);
      NumberPart();
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExtentionsPart() throws ParseException {/*@bgen(jjtree) ExtentionsPart */
  ASTExtentionsPart jjtn000 = new ASTExtentionsPart(JJTEXTENTIONSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXTENTIONS_TKN);
      NumberPart();
      jj_consume_token(TO_TKN);
      NumberPart();
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExtendPart() throws ParseException {/*@bgen(jjtree) ExtendPart */
  ASTExtendPart jjtn000 = new ASTExtendPart(JJTEXTENDPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXTEND_TKN);
      ClassPart();
      MessageBranchePart();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  /** Generated Token Manager. */
  public ProtoParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7b200000,0x7b200000,0x4000000,0x402040,0x0,0x422040,0x400,0x8000,0x800,0x8000,0x38000000,0x1000000,0x1000000,0x0,0x8000,0x0,0x8000,0x2100,0x1000000,0xe1808100,0xe1808100,0x800000,0x0,0x8000,0x20000,0x8000,0x400,0x8000,0x1008000,0x1000000,0x20000,0x1400,0x1400,0x8000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x4,0x0,0x1c00,0x1000,0x1c00,0x0,0x1000,0x0,0x1000,0x1000,0x200,0x200,0x80,0x1080,0x80,0x1080,0x0,0x0,0x113f,0x113f,0x0,0x20,0x1101,0x0,0x1100,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x1100,};
   }

  /** Constructor with InputStream. */
  public ProtoParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProtoParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProtoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ProtoParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProtoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new ProtoParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ProtoParser(ProtoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProtoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
